$date
	Wed Feb 19 19:52:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath_tb $end
$var wire 1 ! i_lt_x $end
$var wire 8 " fi_out [7:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RST $end
$var reg 8 % X [7:0] $end
$var reg 1 & ld_fi $end
$var reg 1 ' ld_i $end
$var reg 1 ( ld_o $end
$var reg 1 ) st $end
$scope module dp $end
$var wire 1 # CLK $end
$var wire 1 $ RST $end
$var wire 8 * X [7:0] $end
$var wire 1 & ld_fi $end
$var wire 1 ' ld_i $end
$var wire 1 ( ld_o $end
$var wire 1 ) st $end
$var wire 8 + i_out [7:0] $end
$var wire 1 ! i_lt_x $end
$var wire 8 , i_add [7:0] $end
$var wire 8 - fi_src [7:0] $end
$var wire 8 . fi_out [7:0] $end
$var wire 8 / fi_mul [7:0] $end
$var wire 8 0 fi [7:0] $end
$var wire 8 1 X_src [7:0] $end
$var reg 8 2 fi_reg [7:0] $end
$var reg 8 3 i_add_reg [7:0] $end
$scope module add_inst $end
$var wire 8 4 B [7:0] $end
$var wire 8 5 A [7:0] $end
$var reg 8 6 Y [7:0] $end
$upscope $end
$scope module comp_inst $end
$var wire 8 7 B [7:0] $end
$var wire 8 8 A [7:0] $end
$var reg 1 ! Y $end
$upscope $end
$scope module mul_inst $end
$var wire 8 9 A [7:0] $end
$var wire 8 : B [7:0] $end
$var reg 8 ; Y [7:0] $end
$upscope $end
$scope module muxX $end
$var wire 8 < A [7:0] $end
$var wire 8 = B [7:0] $end
$var wire 1 ) sel $end
$var wire 8 > Y [7:0] $end
$upscope $end
$scope module muxfi $end
$var wire 8 ? A [7:0] $end
$var wire 8 @ B [7:0] $end
$var wire 1 ) sel $end
$var wire 8 A Y [7:0] $end
$upscope $end
$scope module regI $end
$var wire 1 # CLK $end
$var wire 8 B D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 ' ld $end
$var reg 8 C Q [7:0] $end
$upscope $end
$scope module regfi $end
$var wire 1 # CLK $end
$var wire 8 D D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 & ld $end
$var reg 8 E Q [7:0] $end
$upscope $end
$scope module regout $end
$var wire 1 # CLK $end
$var wire 8 F D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 ( ld $end
$var reg 8 G Q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 G
b0 F
b0 E
b1 D
b0 C
b1 B
b1 A
b0 @
b1 ?
b1 >
b1 =
b1 <
b0 ;
b0 :
b0 9
b0 8
b11 7
b1 6
b0 5
b1 4
b0 3
b0 2
b1 1
b0 0
b0 /
b0 .
b1 -
b1 ,
b0 +
b11 *
1)
0(
0'
0&
b11 %
1$
0#
b0 "
1!
$end
#5
b1 3
b1 9
1#
0$
#10
0#
#15
b10 ,
b10 6
b10 =
b1 +
b1 5
b1 8
b1 C
1#
1'
#20
0#
#25
b10 3
b10 9
1#
0'
#30
0#
#35
b1 0
b1 E
1#
1&
#40
0#
#45
b10 /
b10 ;
b10 @
b1 2
b1 :
b1 F
1#
0&
#50
0#
#55
b1 "
b1 .
b1 G
1#
1(
#60
0#
#65
1#
0(
#70
0#
#75
b11 ,
b11 6
b11 =
b10 +
b10 5
b10 8
b10 C
b11 1
b11 >
b11 B
b10 -
b10 A
b10 D
1#
1'
0)
#80
0#
#85
b11 -
b11 A
b11 D
b11 /
b11 ;
b11 @
b11 3
b11 9
1#
0'
#90
0#
#95
b11 0
b11 E
1#
1&
#100
0#
#105
b1001 -
b1001 A
b1001 D
b1001 /
b1001 ;
b1001 @
b11 2
b11 :
b11 F
1#
0&
#110
0#
#115
b100 1
b100 >
b100 B
b100 ,
b100 6
b100 =
0!
b11 +
b11 5
b11 8
b11 C
1#
1'
#120
0#
#125
b1100 -
b1100 A
b1100 D
b1100 /
b1100 ;
b1100 @
b100 3
b100 9
1#
0'
#130
0#
#135
b1100 0
b1100 E
1#
1&
#140
0#
#145
b110000 -
b110000 A
b110000 D
b110000 /
b110000 ;
b110000 @
b1100 2
b1100 :
b1100 F
1#
0&
#150
0#
#155
b101 1
b101 >
b101 B
b101 ,
b101 6
b101 =
b100 +
b100 5
b100 8
b100 C
1#
1'
#160
0#
#165
b111100 -
b111100 A
b111100 D
b111100 /
b111100 ;
b111100 @
b101 3
b101 9
1#
0'
#170
0#
#175
b111100 0
b111100 E
1#
1&
#180
0#
#185
b101100 -
b101100 A
b101100 D
b101100 /
b101100 ;
b101100 @
b111100 2
b111100 :
b111100 F
1#
0&
#190
0#
#195
1#
#200
0#
#205
1#
#210
0#
#215
1#
#220
0#
#225
1#
#230
0#
#235
1#
