$date
	Wed Feb 19 21:45:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module facto_tb $end
$var wire 8 ! fi_out [7:0] $end
$var wire 1 " Done $end
$var reg 1 # CLK $end
$var reg 1 $ RST $end
$var reg 8 % X [7:0] $end
$var reg 1 & start_i $end
$scope module uut $end
$var wire 1 # CLK $end
$var wire 1 $ RST $end
$var wire 8 ' X [7:0] $end
$var wire 1 & start_i $end
$var wire 1 ( st $end
$var wire 1 ) ld_o $end
$var wire 1 * ld_i $end
$var wire 1 + ld_fi $end
$var wire 1 , i_lt_x $end
$var wire 8 - fi_out [7:0] $end
$var wire 1 " Done $end
$scope module ct $end
$var wire 1 # CLK $end
$var wire 1 $ RST $end
$var wire 1 & start_i $end
$var wire 1 , i_lt_x $end
$var parameter 3 . ADD $end
$var parameter 3 / COMPARE $end
$var parameter 3 0 DONE $end
$var parameter 3 1 IDLE $end
$var parameter 3 2 LOAD $end
$var parameter 3 3 MULT $end
$var reg 1 " Done $end
$var reg 1 + ld_fi $end
$var reg 1 * ld_i $end
$var reg 1 ) ld_o $end
$var reg 3 4 next_state [2:0] $end
$var reg 1 ( st $end
$var reg 3 5 state [2:0] $end
$upscope $end
$scope module dp $end
$var wire 1 # CLK $end
$var wire 1 $ RST $end
$var wire 8 6 X [7:0] $end
$var wire 1 + ld_fi $end
$var wire 1 * ld_i $end
$var wire 1 ) ld_o $end
$var wire 1 ( st $end
$var wire 8 7 i_out [7:0] $end
$var wire 1 , i_lt_x $end
$var wire 8 8 i_add [7:0] $end
$var wire 8 9 fi_src [7:0] $end
$var wire 8 : fi_out [7:0] $end
$var wire 8 ; fi_mul [7:0] $end
$var wire 8 < fi [7:0] $end
$var wire 8 = X_src [7:0] $end
$scope module add $end
$var wire 8 > B [7:0] $end
$var wire 8 ? A [7:0] $end
$var reg 8 @ Y [7:0] $end
$upscope $end
$scope module comp $end
$var wire 8 A B [7:0] $end
$var wire 8 B A [7:0] $end
$var reg 1 , Y $end
$upscope $end
$scope module mul $end
$var wire 8 C A [7:0] $end
$var wire 8 D B [7:0] $end
$var reg 8 E Y [7:0] $end
$upscope $end
$scope module muxX $end
$var wire 8 F A [7:0] $end
$var wire 8 G B [7:0] $end
$var wire 1 ( sel $end
$var wire 8 H Y [7:0] $end
$upscope $end
$scope module muxfi $end
$var wire 8 I A [7:0] $end
$var wire 8 J B [7:0] $end
$var wire 1 ( sel $end
$var wire 8 K Y [7:0] $end
$upscope $end
$scope module regI $end
$var wire 1 # CLK $end
$var wire 8 L D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 * ld $end
$var reg 8 M Q [7:0] $end
$upscope $end
$scope module regfi $end
$var wire 1 # CLK $end
$var wire 8 N D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 + ld $end
$var reg 8 O Q [7:0] $end
$upscope $end
$scope module regout $end
$var wire 1 # CLK $end
$var wire 8 P D [7:0] $end
$var wire 1 $ RST $end
$var wire 1 ) ld $end
$var reg 8 Q Q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 3
b1 2
b0 1
b101 0
b10 /
b11 .
$end
#0
$dumpvars
b0 Q
b0 P
b0 O
b0 N
b0 M
b1 L
b0 K
b0 J
b1 I
b1 H
b1 G
b1 F
b0 E
b0 D
b1 C
b0 B
bx A
b1 @
b0 ?
b1 >
b1 =
b0 <
b0 ;
b0 :
b0 9
b1 8
b0 7
bx 6
b0 5
b0 4
b0 -
0,
0+
0*
0)
0(
bx '
0&
bx %
1$
0#
0"
b0 !
$end
#5
1#
#10
b1 9
b1 K
b1 N
1+
1*
1(
b1 4
1,
0#
1&
b100 %
b100 '
b100 6
b100 A
0$
#15
b10 9
b10 K
b10 N
b10 =
b10 H
b10 L
b10 8
b10 @
b10 C
b10 G
b10 ;
b10 E
b10 J
b10 4
0(
1+
1*
b1 7
b1 ?
b1 B
b1 M
b1 <
b1 D
b1 O
b1 P
b1 5
1#
#20
0#
#25
b110 9
b110 K
b110 N
b11 =
b11 H
b11 L
b11 4
0+
0*
b110 ;
b110 E
b110 J
b11 8
b11 @
b11 C
b11 G
b10 5
b10 <
b10 D
b10 O
b10 P
b10 7
b10 ?
b10 B
b10 M
1#
#30
0#
#35
b100 4
b11 5
1#
#40
0#
#45
b1 4
b100 5
1#
#50
0#
#55
b10 4
1+
1*
b1 5
1#
#60
0#
#65
b11000 9
b11000 K
b11000 N
b100 =
b100 H
b100 L
b11 4
0+
0*
b11000 ;
b11000 E
b11000 J
b100 8
b100 @
b100 C
b100 G
b10 5
b110 <
b110 D
b110 O
b110 P
b11 7
b11 ?
b11 B
b11 M
1#
#70
b11 4
0#
0&
#75
b100 4
b11 5
1#
#80
0#
#85
b1 4
b100 5
1#
#90
0#
#95
b10 4
1+
1*
b1 5
1#
#100
0#
#105
b1111000 9
b1111000 K
b1111000 N
b101 =
b101 H
b101 L
b101 4
0+
0*
b1111000 ;
b1111000 E
b1111000 J
b101 8
b101 @
b101 C
b101 G
0,
b10 5
b11000 <
b11000 D
b11000 O
b11000 P
b100 7
b100 ?
b100 B
b100 M
1#
#110
0#
#115
b0 4
1"
1)
b101 5
1#
#120
0#
#125
0"
0)
b0 5
b11000 !
b11000 -
b11000 :
b11000 Q
1#
#130
0#
#135
1#
